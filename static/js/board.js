// static/js/board.js 

// index c·ªßa √¥ ‚Äúv√†o t√π‚Äù (data-index tr√™n √¥ THƒÇM T√ô)
const jailIndex = 10;
// index c·ªßa √¥ "l·ªÖ h·ªôi" (data-index tr√™n √¥ L·ªÑ H·ªòI)
const festivalIndex = 20;
// index c·ªßa √¥ "s√¢n bay" (data-index tr√™n √¥ S√ÇN BAY)
const airportIndex = 30;

// Ch·ªâ s·ªë c√°c √¥ ƒë·ªãa danh
const validLandmarkTiles = [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 37, 38, 39]; 

let currentPosition = 0;
let boardTiles = [];
let isMoving = false; // Bi·∫øn tr·∫°ng th√°i ƒë·ªÉ ki·ªÉm tra ng∆∞·ªùi ch∆°i c√≥ ƒëang di chuy·ªÉn kh√¥ng

import { quizData } from './data/quizData.js';
import { provinces }  from './data/provinces.js';


window.onload = async () => {
  // Ch·ªâ s·ªë c√°c √¥ ƒë·ªãa danh
  const validLandmarkTiles = [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 37, 38, 39]; 

  const selectionPopup = document.getElementById("character-selection");
  const kpiPopup = document.getElementById("kpi-popup");
  const boardContainer = document.getElementById("board-container");
  const player = document.getElementById("player");
  const dice = document.getElementById("dice");

  // Hi·ªÉn th·ªã tr·∫°ng th√°i ng∆∞·ªùi ch∆°i
  const infoPanel = document.createElement("div");
  infoPanel.id = "player-info";
  infoPanel.style.width = "200px";
  infoPanel.style.position = "absolute";
  infoPanel.style.top = "20px";
  infoPanel.style.left = "1200px";
  infoPanel.style.background = "#fff9cc";
  infoPanel.style.padding = "10px 16px";
  infoPanel.style.borderRadius = "10px";
  infoPanel.style.boxShadow = "0 0 10px rgba(0,0,0,0.1)";
  infoPanel.style.fontSize = "14px";
  document.body.appendChild(infoPanel);

  function updateInfoPanel() {
    const state = JSON.parse(localStorage.getItem("playerState"));
    const kpi   = state.kpi;

  // Chu·∫©n b·ªã chu·ªói KPI
    const kpiText = `C·∫ßn ${ (kpi.moneyTarget).toLocaleString() }ƒë v√† s·ªü h·ªØu ${ (kpi.requiredTiles) } ƒë·ªãa danh`
      + (kpi.requiredLocations
        ? ` trong ƒë√≥ c√≥ ${ kpi.requiredLocations.join(", ") }`
        : "");
    infoPanel.innerHTML = `
      <div style="margin-bottom: 6px;"><i class="bi bi-cash-coin"></i> <span style="margin-left: 6px;">${state.money.toLocaleString()} VND</span></div>
      <div style="margin-bottom: 6px;"><i class="bi bi-geo-alt-fill"></i> <span style="margin-left: 6px;">${state.ownedTiles.length} ƒë·ªãa danh</span></div>
      <div style="margin-bottom: 6px;"><i class="bi bi-ticket-perforated"></i><span style="margin-left: 6px;"> ${state.freeJailCards} v√© ra t√π</span></div>
      <div>
        <i class="bi bi-flag"></i>
        <span style="margin-left:6px;font-weight:bold;color:#e63946;">
          KPI: ${ kpiText }
        </span>
      </div>
    `;
    const rollBtn = document.querySelector('.dice-container button');
    if (rollBtn) {
      rollBtn.disabled = state.jailStatus === true;
    }

    // --- ƒë·ªìng b·ªô state l√™n server ---
    fetch('/api/game_state', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'include',
      body: JSON.stringify(state)
    });

    // Ki·ªÉm tra ho√†n th√†nh KPI:
  const hasMoney = state.money >= kpi.moneyTarget;
  const hasTiles = state.ownedTiles.length >= kpi.requiredTiles;
  const hasLocs  = !kpi.requiredLocations
    || kpi.requiredLocations.every(loc =>
         state.ownedTiles.some(i => {
           const tile = document.querySelector(`[data-index="${i}"]`);
           const name = tile && (tile.querySelector('.label')||tile.querySelector('.place-name')).textContent.trim();
           return name === loc;
         })
       );

  if (hasMoney && hasTiles && hasLocs) {
    fetch('/api/complete_kpi', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'include',
      body: JSON.stringify(state)
    }).then(() => showCompletionPopup(data.completed_at));
  }
  };

  window.selectCharacter = function (characterId) {
    localStorage.setItem("selectedCharacter", `char${characterId}.png`);
    showProvincePopup();
  };

  function showProvincePopup() {
    const provincePopup = document.createElement("div");
    provincePopup.className = "popup active";
    provincePopup.innerHTML = `
      <h2>Ch·ªçn qu√™ h∆∞∆°ng c·ªßa b·∫°n</h2>
      <input type="text" id="province-search" placeholder="T√¨m t·ªânh th√†nh..." style="width: 100%; padding: 8px; margin-bottom: 12px;">
      <ul id="province-list" style="max-height: 200px; overflow-y: auto; text-align: left;"></ul>
    `;
    document.body.appendChild(provincePopup);

    const list = document.getElementById("province-list");
    const input = document.getElementById("province-search");

    function renderList(filter = "") {
      list.innerHTML = "";
      provinces
        .filter(p => p.toLowerCase().includes(filter.toLowerCase()))
        .forEach(province => {
          const li = document.createElement("li");
          li.textContent = province;
          li.style.cursor = "pointer";
          li.style.padding = "4px";
          li.addEventListener("click", () => {
            localStorage.setItem("playerHometown", province);
            provincePopup.remove();
            showKpiPopup();
          });
          list.appendChild(li);
        });
    }

    input.addEventListener("input", e => renderList(e.target.value));
    renderList();
  }
  
  // Random √¥ tham quan ƒë·∫∑c bi·ªát
  initializeSpecialTiles();
  highlightSpecialTiles();

  function showKpiPopup() {
    const character = localStorage.getItem("selectedCharacter");
    const hometown = localStorage.getItem("playerHometown");

    const kpiOptions = [
      {
        moneyTarget: 3000000,
        requiredTiles: 8,
        requiredLocations: ["H√† N·ªôi", "ƒê√† N·∫µng"]
      },
      {
        moneyTarget: 4000000,
        requiredTiles: 6,
        requiredLocations: ["Hu·∫ø"]
      },
      {
        moneyTarget: 3500000,
        requiredTiles: 7,
        requiredLocations: ["H√† Giang", "TP H·ªì Ch√≠ Minh"]
      }
    ];
    const kpi = kpiOptions[Math.floor(Math.random() * kpiOptions.length)];

    const playerState = {
      character,
      hometown,
      currentTile: 0,
      ownedTiles: [],
      money: 0,
      kpi,
      cards: [],
      jailStatus: false,
      jailTurns: 0,
      freeJailCards: 0
    };

    localStorage.setItem("playerState", JSON.stringify(playerState));

    const kpiText = `B·∫°n c·∫ßn ki·∫øm ${kpi.moneyTarget.toLocaleString()}VND v√† s·ªü h·ªØu ${kpi.requiredTiles} ƒë·ªãa danh, trong ƒë√≥ c√≥ ${kpi.requiredLocations.join(", ")}`;
    document.getElementById("kpi-text").innerText = kpiText;

    document.getElementById("character-selection").classList.remove("active");
    document.getElementById("kpi-popup").classList.add("active");
  }

  window.startGame = function () {
    document.getElementById("kpi-popup").classList.remove("active");
    document.getElementById("board-container").classList.remove("hidden");

    const state = JSON.parse(localStorage.getItem("playerState"));
    const token = document.getElementById("player");
    token.src = `/static/images/${state.character}`;
    token.style.display = "block";

    boardTiles = document.querySelectorAll('[data-index]');
    moveToTile(state.currentTile);
    updateInfoPanel();
  };

  window.rollDice = function () {
    if (isMoving)
      return;
    const diceEl = document.getElementById("dice");
    diceEl.style.animation = "shake 0.5s";
    setTimeout(() => {
      diceEl.style.animation = "";
      const die1 = Math.floor(Math.random()*6)+1;
      const die2 = Math.floor(Math.random()*6)+1;
      const value = die1 + die2;
      //test
      //const value = 40;
      diceEl.innerText = `üé≤ ${value}`;
  
      // n·∫øu ƒëang ch·ªù double ƒë·ªÉ ra t√π:
      const state = JSON.parse(localStorage.getItem("playerState"));
      if (state.jailStatus === "waitingDouble") {
        if (die1 === die2) {
          state.jailStatus = false;
          localStorage.setItem("playerState", JSON.stringify(state));
          setTimeout(() => {
            alert("B·∫°n ƒë√£ tung ƒë√¥i! Ra t√π v√† di chuy·ªÉn " + value + " b∆∞·ªõc.");;
          }, 300);
          animateMovement(value);
        } else {
          setTimeout(() => {
            alert("Ch∆∞a tung ƒë√¥i, ch·ªù l·∫ßn sau!");;
          }, 300);;
        }
        return;
      }
  
      animateMovement(value);
    }, 500);
  };  

  function animateMovement(steps) {
    isMoving = true; // B·∫Øt ƒë·∫ßu di chuy·ªÉn
    updateInfoPanel();
    let step = 0;
    const interval = setInterval(() => {
      // L∆∞u v·ªã tr√≠ c≈© ƒë·ªÉ bi·∫øt c√≥ v∆∞·ª£t qua √¥ 0 kh√¥ng
      const prevPos = currentPosition;
      // Di chuy·ªÉn
      currentPosition = (currentPosition + 1) % boardTiles.length;
      moveToTile(currentPosition);
  
      // N·∫øu t·ª´ cu·ªëi v√≤ng (v√≠ d·ª• 39) ƒëi v·ªÅ 0 th√¨ coi l√† ƒë√£ v∆∞·ª£t qua GO
      if (currentPosition === 0) {
        const state = JSON.parse(localStorage.getItem("playerState"));
        state.money += 200000;                              // c·ªông 200k
        localStorage.setItem("playerState", JSON.stringify(state));
        updateInfoPanel();
      }
  
      step++;
      if (step >= steps) {
        clearInterval(interval);
        updateCurrentPosition();
        // K√≠ch ho·∫°t tung x√∫c x·∫Øc
        isMoving = false; // K·∫øt th√∫c di chuy·ªÉn
        //setRollEnabled(true); // K√≠ch ho·∫°t l·∫°i n√∫t tung x√∫c x·∫Øc
        if (rollBtn) rollBtn.disabled = false;
        updateInfoPanel();
      }
    }, 300);
  };

  function updateCurrentPosition() {
    const state = JSON.parse(localStorage.getItem("playerState"));
    state.currentTile = currentPosition;
    localStorage.setItem("playerState", JSON.stringify(state));
    updateInfoPanel();
    
    // Ki·ªÉm tra n·∫øu √¥ hi·ªán t·∫°i l√† √¥ ƒë·∫∑c bi·ªát
    handleSpecialTile(currentPosition);

    // N·∫øu ng∆∞·ªùi ch∆°i ·ªü √¥ b·∫Øt ƒë·∫ßu, v√¥ hi·ªáu h√≥a n√∫t tung x√∫c x·∫Øc
    if (currentPosition === 0) {
        setRollEnabled(true);
      return;
    }
  
    // disable n√∫t tung x√∫c x·∫Øc
    setRollEnabled(false); 

    if (currentPosition === jailIndex) {
      handleJailTile();
    } else if (currentPosition === festivalIndex) {
      handleFestivalTile();
    } else if (currentPosition === airportIndex) {
      showAirportDialog();
    } else {
      showTileDialog(currentPosition);
    }
  }; 

  function moveToTile(index) {
    // Kh√≥a tung x√∫c x·∫Øc 
    const rollBtn = document.querySelector('.dice-container button');
    if (rollBtn) rollBtn.disabled = true;
    updateInfoPanel();
    const tile = boardTiles[index];
    const rect = tile.getBoundingClientRect();
    const boardRect = document.querySelector(".board").getBoundingClientRect();
    const player = document.getElementById("player");

    const offsetX = rect.left - boardRect.left + tile.offsetWidth / 2;
    const offsetY = rect.top - boardRect.top + tile.offsetHeight / 2;

    player.style.left = `${offsetX}px`;
    player.style.top = `${offsetY}px`;
    // K√≠ch ho·∫°t l·∫°i
    if (rollBtn) rollBtn.disabled = false;
    updateInfoPanel();
  }; 

  // H√†m shuffle (Fisher‚ÄìYates) ƒë·ªÉ tr·ªôn m·∫£ng c√¢u h·ªèi
  function shuffle(array) {
    const a = array.slice();
    for (let i = a.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [a[i], a[j]] = [a[j], a[i]];
    }
    return a;
  };

  function showTileDialog(index) {

    const state = JSON.parse(localStorage.getItem("playerState")) || {};
    // N·∫øu ƒë√£ s·ªü h·ªØu th√¨ kh√¥ng hi·ªÉn th·ªã
    if (state.ownedTiles && state.ownedTiles.includes(index)) return;
  
    const tileEl = document.querySelector(`[data-index="${index}"]`);
    if (!tileEl) return;
    if (tileEl.querySelector('.Gieo_Que')) {
      showGieoQueDialog();
      return;
    };
    const nameEl = tileEl.querySelector(".label");
    if (!nameEl) return;
    const placeKey = nameEl.textContent.trim();
  
    const quiz = quizData[placeKey];
    if (!quiz) return;

    // Ch·ªçn random 1 c√¢u easy, 4 c√¢u hard
    const easyPool = shuffle(quiz.easy).slice(0, 1);
    const hardPool = shuffle(quiz.hard).slice(0, 4);
  
    const pp = document.getElementById("purchase-popup");
    const titleEl = pp.querySelector("#purchase-title");
    if (titleEl) {
      titleEl.textContent = `B·∫°n c√≥ mu·ªën s·ªü h·ªØu ƒë·ªãa danh "${placeKey}" kh√¥ng?`;
    }
  
    pp.classList.remove("hidden");
    pp.classList.add("active");
  
    // Remove old listeners
    let yesBtn = document.getElementById("btn-purchase-yes");
    let noBtn  = document.getElementById("btn-purchase-no");
    yesBtn.replaceWith(yesBtn.cloneNode(true));
    noBtn.replaceWith(noBtn.cloneNode(true));
  
    // Add new listeners
    document.getElementById("btn-purchase-yes").addEventListener("click", () => {
      pp.classList.add("hidden");
      pp.classList.remove("active");
      launchQuiz(hardPool, placeKey, index);
    });
    document.getElementById("btn-purchase-no").addEventListener("click", () => {
      pp.classList.add("hidden");
      pp.classList.remove("active");
      launchQuiz(easyPool, placeKey, index);
    });
  }; 
  
  // function ƒë·ªÉ di chuy·ªÉn ngay ƒë·∫øn index
  function animateMovementToIndex(targetIndex) {
    currentPosition = targetIndex;
    moveToTile(targetIndex);
    const state = JSON.parse(localStorage.getItem('playerState')) || {};
    state.currentTile = targetIndex;
    localStorage.setItem('playerState', JSON.stringify(state));
    updateInfoPanel();
  }; 
  
  // Disable n√∫t tung x√∫c x·∫Øc
  function setRollEnabled(on) {
    const btn = document.querySelector('.dice-container button');
    if (btn) btn.disabled = !on;
  }

  // Disable n√∫t tung x√∫c x·∫Øc trong n gi√¢y
  function disableRollForSeconds(seconds) {
    const btn = document.querySelector('.dice-container button');
    let remaining = seconds;
    const originalText = btn.innerText;      // l∆∞u nh√£n g·ªëc (v√≠ d·ª•: "Tung x√∫c x·∫Øc")
    btn.disabled = true;
    btn.innerText = `ƒê·ª£i ${remaining}s`;    // hi·ªÉn th·ªã th·ªùi gian ban ƒë·∫ßu
  
    const timerId = setInterval(() => {
      remaining--;
      if (remaining > 0) {
        btn.innerText = `ƒê·ª£i ${remaining}s`;
      } else {
        clearInterval(timerId);
        btn.disabled = false;
        btn.innerText = originalText;       // ph·ª•c h·ªìi nh√£n g·ªëc
      }
    }, 1000);
  }; 

  function showMetroDialog() {
    const modal = document.getElementById('popup-metro');
    const select = document.getElementById('metro-select');
    const btnOk  = document.getElementById('btn-confirm-metro');
    const btnX   = document.getElementById('btn-close-metro');
  
    // load options
    select.innerHTML = '';
    boardTiles.forEach(tile => {
      const idx = +tile.dataset.index;
      const nameEl = tile.querySelector('.label') || tile.querySelector('.place-name');
      const txt = nameEl ? nameEl.textContent.trim() : `√î ${idx}`;
      const opt = document.createElement('option');
      opt.value = idx;
      opt.textContent = `${idx}: ${txt}`;
      select.appendChild(opt);
    });
  
    modal.classList.remove('hidden'); modal.classList.add('active');
  
    btnOk.onclick = () => {
      const target = +select.value;
      const total = boardTiles.length;
      // t√≠nh s·ªë b∆∞·ªõc theo v√≤ng quanh b√†n (xoay v√≤ng n·∫øu target < currentPosition)
      const steps = (target - currentPosition + total) % total;
      animateMovement(steps);           // d√πng animation di chuy·ªÉn qua t·ª´ng √¥
      modal.classList.add('hidden');
      modal.classList.remove('active');
    };
    btnX.onclick = () => modal.classList.add('hidden');
  }; 

  // B·ªô th·∫ª gieo qu·∫ª
  const chanceCards = [
    { id: 1,
      text: '[Qu·∫ª M·∫†NG X√É H·ªòI] B·∫°n b·ªã t·ªë c√°o vi ph·∫°m clip ‚Äúcontent‚Äù tr√™n m·∫°ng ‚Üí ƒêi th·∫≥ng v√†o ‚Äútr·∫°i gi√°o d·ª•c vƒÉn ho√°‚Äù.',
      effect: state => { 
        // di chuy·ªÉn ƒë·∫øn t√π
        animateMovementToIndex(jailIndex);
        state.jailStatus = true;
        localStorage.setItem("playerState", JSON.stringify(state));
        updateInfoPanel();
        handleJailTile(); }
    },
    { id: 2,
      text: '[Qu·∫ª TIKTOK] B·∫°n l√†m video review b√∫n b√≤ Hu·∫ø nh∆∞ng n√≥i nh·∫ßm l√† m√≥n B·∫Øc. ‚Üí B·ªã c·ªông ƒë·ªìng Hu·∫ø ph·∫£n ·ª©ng. Ch·ªù 30s m·ªõi ƒë∆∞·ª£c ch∆°i ti·∫øp.',
      effect: state => { 
        // disable tung x√∫c x·∫Øc 30s
        disableRollForSeconds(30); }
    },
    { id: 3,
      text: '[Qu·∫ª ƒê·∫†I C√ÅT] V√¨ l√† ng∆∞·ªùi c√≥ t∆∞·ªõng m·∫°o xinh ƒë·∫πp, tr√≠ th·ª©c ng·ªùi ng·ªùi. Nh·∫≠n ƒë∆∞·ª£c 1 v√© ra T√ô mi·ªÖn ph√≠.',
      effect: state => { 
        state.freeJailCards = (state.freeJailCards||0) + 1;
        localStorage.setItem("playerState", JSON.stringify(state));
        updateInfoPanel(); }
    },
    { id: 4,
      text: '[Qu·∫ª V√ôNG MI·ªÄN] V√¥ t√¨nh ƒëi nh·∫ßm l·ªÖ h·ªôi ch·ª£ tr·ªùi ‚Äì ƒê·ªì S∆°n, H·∫£i Ph√≤ng ‚Üí M·∫•t 30s nh∆∞ng c√≥ b√†i h·ªçc vƒÉn ho√° v√πng mi·ªÅn.',
      effect: state => { disableRollForSeconds(30); }
    },
    { id: 5,
      // Quiz-type card
      text: '[Qu·∫ª VƒÇN CH∆Ø∆†NG] Trong t√°c ph·∫©m ‚ÄúL√£o H·∫°c‚Äù c·ªßa Nam Cao, L√£o H·∫°c ƒë√£ quy·∫øt ƒë·ªãnh l√†m g√¨ ƒë·ªÉ gi·∫£i tho√°t cho con ch√≥ c·ªßa m√¨nh?',
      options: [
        'a) ƒêem b√°n n√≥ cho ng∆∞·ªùi l·∫°',
        'b) Gi·∫øt con ch√≥ tr∆∞·ªõc khi ng∆∞·ªùi kh√°c mua',
        'c) ƒê·ªÉ l·∫°i con ch√≥ cho ng∆∞·ªùi b·∫°n th√¢n',
        'd) Kh√°c'
      ],
      answerIndex: 1,    // ƒë√°p √°n b)
      reward: 150000,     // ƒë∆∞·ª£c c·ªông 150k n·∫øu ƒë√∫ng
      penalty: 50000      // tr·ª´ 50k n·∫øu sai
    },
    { id: 6, text: '[Qu·∫ª T√ÄU METRO] B·∫°n ƒë∆∞·ª£c l√™n t√†u Metro ‚Äì di chuy·ªÉn t·ªõi b·∫•t c·ª© √¥ n√†o b·∫°n mu·ªën.', 
      effect: state => { showMetroDialog(); }
    }
    // ... c√°c th·∫ª kh√°c
  ];

  // H√†m hi·ªÉn th·ªã dialog Gieo Qu·∫ª
  function showGieoQueDialog() {
    const modal = document.getElementById('popup-gieo-que');
    const body  = modal.querySelector('.gieo-que-body');
    const btnG0 = document.getElementById('btn-gieo-que');
    const btnC0 = document.getElementById('btn-close-gieo');
  
    // Hi·ªÉn th·ªã modal
    modal.classList.remove('hidden');
    modal.classList.add('active');
  
    // Reset body v√† n√∫t Gieo
    body.innerHTML = `
    <p style="text-align:center;">
      Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ gieo qu·∫ª v√† xem ƒëi·ªÅm b√°o:
    </p>
    <button id="btn-gieo-que" class="btn-gieo">Gieo</button>
    <div id="result-gieo" class="gieo-result hidden"></div>
  `;

    // Query l·∫°i c√°c n√∫t  
    const btnG = document.getElementById('btn-gieo-que');
    const btnC = document.getElementById('btn-close-gieo');
    const result = document.getElementById('result-gieo');
  
    // R√∫t th·∫ª ng·∫´u nhi√™n
    const card = chanceCards[Math.floor(Math.random() * chanceCards.length)];
    //test Gieo Qu·∫ª
    //const card = chanceCards.find(c => c.id === 2);
    btnG.textContent = 'Gieo';
    btnG.disabled = false;
    btnG.onclick = () => {
    // Khi ·∫•n Gieo:
    if (card.options) {
      // Quiz-type: hi·ªÉn th·ªã c√¢u h·ªèi, options, ƒë·ªïi btn th√†nh "X√°c nh·∫≠n"
      const qText = document.createElement('p');
      qText.className = 'quiz-text';
      qText.textContent = card.text;
      body.insertBefore(qText, btnG);

      const form = document.createElement('form');
      form.className = 'quiz';
      card.options.forEach((opt, idx) => {
        const label = document.createElement('label');
        label.style.display = 'block';
        label.innerHTML = `<input type=\"radio\" name=\"choice\" value=\"${idx}\" /> ${opt}`;
        form.appendChild(label);
      });
      body.insertBefore(form, btnG);

      btnG.textContent = 'X√°c nh·∫≠n';
      // G√°n l·∫°i listener x·ª≠ l√Ω ƒë√°p √°n
      btnG.onclick = e => {
        e.preventDefault();
        const sel = form.querySelector('input[name="choice"]:checked');
        const state = JSON.parse(localStorage.getItem('playerState')) || {};
        if (sel && Number(sel.value) === card.answerIndex) {
          state.money = (state.money || 0) + card.reward;
          alert(`Ch√≠nh x√°c! +${card.reward.toLocaleString()}VND`);
          setRollEnabled(true);
        } else {
          state.money = Math.max(0, (state.money || 0) - card.penalty);
          alert(`Sai r·ªìi! -${card.penalty.toLocaleString()}VND`);
          setRollEnabled(true);
        }
        localStorage.setItem('playerState', JSON.stringify(state));
        updateInfoPanel();
        modal.classList.add('hidden');
        modal.classList.remove('active');
      };
  
    } else {
      // Hi·ªÉn th·ªã n·ªôi dung th·∫ª v√†o result
      result.textContent = card.text;
      result.classList.remove('hidden');
      result.classList.add('visible');

      // Th·∫ª th∆∞·ªùng: apply effect ngay
      const state = JSON.parse(localStorage.getItem('playerState')) || {};
      card.effect(state);
      localStorage.setItem('playerState', JSON.stringify(state));
      updateInfoPanel();
  
      // ·∫®n n√∫t Gieo
      btnG.style.display = 'none';
      }
    };    
  
    // Handler ƒë√≥ng modal
    btnC.onclick = () => {
      modal.classList.add('hidden');
      modal.classList.remove('active');
      setRollEnabled(true);
    };
  }; 

  // H√†m th√™m badge "ƒê√£ s·ªü h·ªØu" l√™n √¥
function addOwnedBadge(index) {
  const tile = document.querySelector(`[data-index="${index}"]`);
  if (!tile || tile.querySelector('.owned-badge')) return;
  tile.style.position = 'relative';
  const badge = document.createElement('div');
  badge.className = 'owned-badge';
  badge.innerText = 'ƒê√£ s·ªü h·ªØu';
  tile.appendChild(badge);
}; 

  // H√†m th√™m bage "L·ªÖ h·ªôi" l√™n √¥
  function addFestivalBadge(index) {
    const tile = document.querySelector(`[data-index="${index}"]`);
    if (!tile) return;
    // n·∫øu ƒë√£ c√≥ r·ªìi th√¨ th√¥i
    if (tile.querySelector('.festival-badge')) return;
  
    tile.style.position = 'relative';
    const badge = document.createElement('div');
    badge.className = 'festival-badge';
    badge.innerText = 'L·ªÖ h·ªôi';
    tile.appendChild(badge);
  }

  // H√†m ch·∫°y quiz v√† c·∫≠p nh·∫≠t badge
function launchQuiz(questions, placeKey, index) {
  const placeSpan = document.getElementById('quiz-place');
  if (placeSpan) placeSpan.textContent = placeKey;

  const qp = document.getElementById("quiz-popup");
  const titleEl = qp.querySelector("#quiz-title");
  if (titleEl) {
    titleEl.textContent = questions.length > 1
      ? `Tr·∫£ l·ªùi ${questions.length} c√¢u h·ªèi kh√≥ v·ªÅ "${placeKey}"`
      : `Tr·∫£ l·ªùi 1 c√¢u h·ªèi ƒë∆°n gi·∫£n v·ªÅ "${placeKey}"`;
  }

  const form = document.getElementById("quiz-form");
  if (!form) return;
  form.innerHTML = '';
  questions.forEach((q, i) => {
    const wrapper = document.createElement('div');
    wrapper.classList.add('quiz-question');
    wrapper.innerHTML = `<p>${i+1}. ${q.question}</p>`;
    q.options.forEach((opt, idx) => {
      const label = document.createElement('label');
      label.innerHTML = `<input type="radio" name="q${i}" value="${idx}" /> ${opt}`;
      wrapper.appendChild(label);
    });
    form.appendChild(wrapper);
  });
  
  // Show popup 
  qp.classList.remove('hidden'); 
  qp.classList.add('active');

  // Kh√≥a n√∫t tung x√∫c x·∫Øc
  setRollEnabled(false);
  // reset scroll v·ªÅ ƒë·∫ßu
  const quizBody = qp.querySelector(".quiz-body");
  if (quizBody) quizBody.scrollTop = 0;

  let submitBtn = document.getElementById('btn-quiz-submit');
  submitBtn.replaceWith(submitBtn.cloneNode(true));
  document.getElementById('btn-quiz-submit').addEventListener('click', e => {
    e.preventDefault();
    let allCorrect = true;
    questions.forEach((q, i) => {
      const sel = form.querySelector(`input[name="q${i}"]:checked`);
      if (!sel || Number(sel.value) !== q.answerIndex) allCorrect = false;
    });
    
    // ƒê√≥ng popup 
    qp.classList.add('hidden'); 
    qp.classList.remove('active');

    const state = JSON.parse(localStorage.getItem('playerState')) || {};
    state.ownedTiles = state.ownedTiles || [];
    if (allCorrect) {
      if (questions.length > 1 && !state.ownedTiles.includes(index)) {
        state.ownedTiles.push(index);
        // th√™m badge ngay l·∫≠p t·ª©c
        addOwnedBadge(index);
      }
      const bonus = questions.length > 1
        ? state.kpi.moneyTarget * 0.1
        : state.kpi.moneyTarget * 0.05;
      state.money = (state.money || 0) + bonus;
      localStorage.setItem('playerState', JSON.stringify(state));
      updateInfoPanel();
      alert('Ch√∫c m·ª´ng! B·∫°n tr·∫£ l·ªùi ƒë√∫ng.');
    } else {
      alert('R·∫•t ti·∫øc, b·∫°n tr·∫£ l·ªùi ch∆∞a ƒë√∫ng.');
    }
    setRollEnabled(true);
  });
}; 

function handleJailTile() {
  // Kh√≥a n√∫t tung x√∫c x·∫Øc
  // setRollEnabled(false);
  const state = JSON.parse(localStorage.getItem("playerState"));
  state.jailStatus = true;
  localStorage.setItem("playerState", JSON.stringify(state));
  updateInfoPanel();
  //document.querySelector('.dice-container button').disabled = true;
  const modal = document.getElementById("popup-jail");
  const msg   = document.getElementById("jail-message");
  const footer= document.getElementById("jail-buttons");
  
  // reset
  footer.innerHTML = "";

  if (state.freeJailCards > 0) {
    msg.textContent = `B·∫°n c√≥ ${state.freeJailCards} v√© ‚ÄúRa t√π mi·ªÖn ph√≠‚Äù. D√πng 1 v√© ƒë·ªÉ ra ngay?`;
    // N√∫t c√≥:
    const yes = document.createElement("button");
    yes.className = "btn-purchase-yes";
    yes.textContent = "D√πng th·∫ª";
    yes.onclick = () => {
      state.freeJailCards--;
      state.jailStatus = false;
      localStorage.setItem("playerState", JSON.stringify(state));
      updateInfoPanel();
      closeJailPopup();
    };
    // N√∫t kh√¥ng:
    const no = document.createElement("button");
    no.className = "btn-purchase-no";
    no.textContent = "Kh√¥ng d√πng";
    no.onclick = () => {
      closeJailPopup();
      askJailChoice();
    };
    footer.append(yes, no);

  } else {
    // kh√¥ng c√≥ th·∫ª, h·ªèi b·∫°n mu·ªën:
    askJailChoice();
  }

  // show modal
  modal.classList.remove("hidden");
  modal.classList.add("active");
}; 

// H√†m hi·ªÉn th·ªã l·ª±a ch·ªçn ra t√π
function askJailChoice() {
  const state = JSON.parse(localStorage.getItem("playerState"));
  const modal = document.getElementById("popup-jail");
  const msg    = document.getElementById("jail-message");
  const footer = document.getElementById("jail-buttons");

  // ƒë·∫£m b·∫£o modal ƒëang m·ªü
  modal.classList.remove("hidden");
  modal.classList.add("active");
 
  msg.textContent = "B·∫°n ·ªü t√π! Ch·ªçn c√°ch ra:";
  footer.innerHTML = "";

  // 1) Tr·∫£ 1 tri·ªáu
  const pay = document.createElement("button");
  pay.className = "btn-purchase-yes";
  pay.textContent = "Tr·∫£ 1 Tri·ªáu";
  pay.onclick = () => {
    const st = JSON.parse(localStorage.getItem("playerState"));
    if (st.money >= 1_000_000) {
      st.money -= 1_000_000;
      st.jailStatus = false;
      localStorage.setItem("playerState", JSON.stringify(st));
      updateInfoPanel();
      closeJailPopup();
    } else {
      alert("B·∫°n kh√¥ng ƒë·ªß ti·ªÅn!");
      // gi·ªØ popup jail, kh√¥ng c·∫ßn g·ªçi l·∫°i
    }
  };

  // 2) Tr·∫£ l·ªùi quiz
  const quizBtn = document.createElement("button");
  quizBtn.className = "btn-purchase-no";
  quizBtn.textContent = "Tr·∫£ l·ªùi quiz";
  quizBtn.onclick = () => {
    closeJailPopup();
    launchJailQuiz();
  };

  // 3) Tung ƒë√¥i
  const dbl = document.createElement("button");
  dbl.className = "btn-purchase-no";
  dbl.textContent = "Tung ƒë√¥i";
  dbl.onclick = () => {
    closeJailPopup();
    const st = JSON.parse(localStorage.getItem("playerState"));
    st.jailStatus = "waitingDouble";
    localStorage.setItem("playerState", JSON.stringify(st));
    // K√≠ch ho·∫°t l·∫°i n√∫t "Tung x√∫c x·∫Øc"
    const rollBtn = document.querySelector('.dice-container button');
    if (rollBtn) rollBtn.disabled = false;
    updateInfoPanel();
    alert("B·∫°n c·∫ßn tung ƒë√¥i ƒë·ªÉ ra t√π!");
  };

  footer.append(pay, quizBtn, dbl);
}

// H√†m ƒë√≥ng popup jail
function closeJailPopup() {
  const modal = document.getElementById("popup-jail");
  modal.classList.add("hidden");
  modal.classList.remove("active");
}

// H√†m quiz ri√™ng cho V√†o t√π
function launchJailQuiz() {
  // 1) chu·∫©n b·ªã b·ªô c√¢u h·ªèi
  const jailQuiz = [
    {
      question: "Trong h·ªá th·ªëng t·ª•c l·ªá ch·∫ßu c√∫ng c·ªßa ng∆∞·ªùi Vi·ªát, nghi th·ª©c 'C·∫ßu an' th∆∞·ªùng ƒë∆∞·ª£c t·ªï ch·ª©c v√†o d·ªãp n√†o?",
      options: ["ƒê·∫ßu Xu√¢n, m√πng 1 T·∫øt", "R·∫±m th√°ng Gi√™ng", "Cu·ªëi m√πa Thu", "R·∫±m th√°ng B·∫£y"],
      answerIndex: 1
    },
    {
      question: "T·ª´ th·ªùi L√™, ph√°p lu·∫≠t n√†o quy ƒë·ªãnh nghi√™m kh·∫Øc h√¨nh ph·∫°t c·∫ßm t√π cho t·ªôi ph·∫°m ch√≠nh tr·ªã?",
      options: ["H√¨nh Lu·∫≠t L√™ Th√°nh T√¥ng", "H√¨nh Lu·∫≠t H·ªìng ƒê·ª©c", "H√¨nh Lu·∫≠t Thi·ªáu Tr·ªã", "H√¨nh Lu·∫≠t Gia Long"],
      answerIndex: 1
    },
    {
      question: "Trong vƒÉn h√≥a cung ƒë√¨nh Hu·∫ø, nghi l·ªÖ n√†o d√πng ƒë·ªÉ t·ªëng quan ph·∫°m t·ªôi xu·ªëng ng·ª•c?",
      options: ["L·ªÖ X·ª≠ Binh", "L·ªÖ T·ªëng Ng·ª•c", "L·ªÖ Tr·ª•c Xu·∫•t", "L·ªÖ Khai Ph√≤ng"],
      answerIndex: 1
    },
    {
      question: "Theo lu·∫≠t phong ki·∫øn nh√† Nguy·ªÖn, t·ªôi 'ph·∫£n qu·ªëc' h√¨nh ph·∫°t cao nh·∫•t l√† g√¨?",
      options: ["ƒê√†y bi·ªát x·ª©", "Ch√©m ƒë·∫ßu", "T·ªëng giam v√¥ th·ªùi h·∫°n", "ƒê√°nh ƒë√≤n kinh phong"],
      answerIndex: 1
    },
    {
      question: "NƒÉm 1829, vua Minh M·∫°ng cho x√¢y d·ª±ng ng·ª•c giam n√†o l√†m n√≤ng c·ªët giam gi·ªØ t·ªôi ph·∫°m ch√≠nh tr·ªã?",
      options: ["Ng·ª•c Nh√† L√™", "Ng·ª•c Nh·∫•t T·ª± S∆°n", "Ng·ª•c Qu·∫£ng ƒê√¥ng", "Ng·ª•c Nh√† Nguy·ªÖn"],
      answerIndex: 1
    }
  ];
  const questions = shuffle(jailQuiz).slice(0, 3);

  // 2) render l√™n quiz-popup
  const qp     = document.getElementById("quiz-popup");
  const title  = qp.querySelector(".quiz-title");
  const form   = document.getElementById("quiz-form");
  title.textContent =`Th·ª≠ th√°ch ra t√π: tr·∫£ l·ªùi ${questions.length} c√¢u`;
  form.innerHTML     = "";

  questions.forEach((q, i) => {
    const container = document.createElement("div");
    container.className = "quiz-question";
    container.innerHTML = `<p>${i+1}. ${q.question}</p>`;
    q.options.forEach((opt, idx) => {
      const lbl = document.createElement("label");
      lbl.innerHTML = `<input type="radio" name="jailQ${i}" value="${idx}" /> ${opt}`;
      container.appendChild(lbl);
    });
    form.appendChild(container);
  });

  // show popup
  qp.classList.remove("hidden");
  qp.classList.add("active");
  // Reset scroll v·ªÅ ƒë·∫ßu
  const quizBody = qp.querySelector(".quiz-body");
  if (quizBody) {
    quizBody.scrollTop = 0;
  }

  // 3) handler submit
  const submit = document.getElementById("btn-quiz-submit");
  // clone ƒë·ªÉ remove m·ªçi listener c≈©
  const newSubmit = submit.cloneNode(true);
  submit.replaceWith(newSubmit);
  newSubmit.addEventListener("click", e => {
    e.preventDefault();
    // ki·ªÉm tra ƒë√∫ng/sai
    let allCorrect = true;
    questions.forEach((q, i) => {
      const sel = form.querySelector(`input[name="jailQ${i}"]:checked`);
      if (!sel || +sel.value !== q.answerIndex) allCorrect = false;
    });
    // ƒë√≥ng quiz-popup
    qp.classList.add("hidden");
    qp.classList.remove("active");

    // x·ª≠ l√Ω k·∫øt qu·∫£
    const st = JSON.parse(localStorage.getItem("playerState"));
    if (allCorrect) {
      st.jailStatus = false;
      localStorage.setItem("playerState", JSON.stringify(st));
      updateInfoPanel();
      alert("B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng c·∫£ 3 c√¢u! Ra t√π v√† ti·∫øp t·ª•c ch∆°i.");
    } else {
      alert("B·∫°n ch∆∞a v∆∞·ª£t qua th·ª≠ th√°ch, v·∫´n ·ªü trong t√π.");
      // quay l·∫°i popup jail choice
      askJailChoice();
    }
  });
};

function handleFestivalTile() {
  const state = JSON.parse(localStorage.getItem("playerState"));
  const owned = state.ownedTiles || [];
  if (owned.length === 0) {
    setTimeout(() => {
      alert("B·∫°n ch∆∞a c√≥ ƒë·ªãa danh n√†o ƒë·ªÉ t·ªï ch·ª©c l·ªÖ h·ªôi!");
    }, 300);
    setRollEnabled(true);
    return;
  }

  // Chu·∫©n b·ªã dialog
  const modal = document.getElementById("popup-festival");
  const sel   = document.getElementById("festival-select");
  sel.innerHTML = "";
  owned.forEach(idx => {
    const tile = document.querySelector(`[data-index="${idx}"]`);
    const name = tile.querySelector(".label, .place-name").textContent.trim();
    const opt = document.createElement("option");
    opt.value = idx;
    opt.textContent = name;
    sel.appendChild(opt);
  });

  // Show
  modal.classList.remove("hidden");
  modal.classList.add("active");

  // N√∫t OK
  const ok = document.getElementById("btn-festival-ok");
  ok.onclick = () => {
    const chosenIdx = +sel.value;
    const bonus = 200000;               // v√≠ d·ª•: 200k
    state.money = (state.money || 0) + bonus;
    localStorage.setItem("playerState", JSON.stringify(state));
    updateInfoPanel();

    // g·ª° badge ƒê√£ s·ªü h·ªØu (n·∫øu c√≥)
    const old = document.querySelector(`[data-index="${chosenIdx}"] .owned-badge`);
    if (old) old.remove();
    // th√™m tem L·ªÖ H·ªôi
    addFestivalBadge(chosenIdx);

    closeFestivalPopup();
    alert(`B·∫°n ƒë√£ t·ªï ch·ª©c l·ªÖ h·ªôi t·∫°i "${sel.selectedOptions[0].text}" v√† nh·∫≠n ƒë∆∞·ª£c ${bonus.toLocaleString()} VND!`);
    setRollEnabled(true);
  };

  // N√∫t H·ªßy
  const cancel = document.getElementById("btn-festival-cancel");
  cancel.onclick = closeFestivalPopup;
}

function closeFestivalPopup() {
  const modal = document.getElementById("popup-festival");
  modal.classList.add("hidden");
  modal.classList.remove("active");
  setRollEnabled(true);
};

function showAirportDialog() {
  const modal = document.getElementById('popup-airport');
  const select = document.getElementById('airport-select');
  const btnOk  = document.getElementById('btn-confirm-airport');
  const btnX   = document.getElementById('btn-close-airport');

  // 1. Build danh s√°ch c√°c √¥
  select.innerHTML = '';
  boardTiles.forEach(tile => {
    const idx = +tile.dataset.index;
    const nameEl = tile.querySelector('.label') || tile.querySelector('.place-name');
    const txt = nameEl ? nameEl.textContent.trim() : `√î ${idx}`;
    const opt = document.createElement('option');
    opt.value = idx;
    opt.textContent = `${idx}: ${txt}`;
    select.appendChild(opt);
  });

  // 2. Hi·ªán popup
  modal.classList.remove('hidden');
  modal.classList.add('active');

  // 3. B·∫•m OK -> di chuy·ªÉn
  btnOk.onclick = () => {
    const target = +select.value;
    const total  = boardTiles.length;
    // S·ªë b∆∞·ªõc c·∫ßn ƒëi (xoay v√≤ng n·∫øu c·∫ßn)
    const steps = (target - currentPosition + total) % total;
    animateMovement(steps);
    modal.classList.add('hidden');
    modal.classList.remove('active');
    setRollEnabled(true);
  };

  // 4. B·∫•m X ƒë√≥ng popup
  btnX.onclick = () => {
    modal.classList.add('hidden');
    modal.classList.remove('active');
    setRollEnabled(true);
  };
};

function showCompletionPopup() {
  const popup = document.getElementById("popup-complete");
  popup.classList.remove("hidden");
  popup.classList.add("active");

  // clear c≈© & g·∫Øn listener
  const btnOk = document.getElementById("btn-complete-ok");
  btnOk.replaceWith(btnOk.cloneNode(true));
  document.getElementById("btn-complete-ok").addEventListener("click", () => {
    // ·∫®n popup
    popup.classList.add("hidden");
    popup.classList.remove("active");
    document.getElementById("board-container").classList.add("hidden");
    // Quay v·ªÅ trang game
    window.location.href = '/game';
  });
};

//const validLandmarkTiles = [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 37, 38, 39]; // Ch·ªâ s·ªë c√°c √¥ ƒë·ªãa danh

function initializeSpecialTiles() {
  const specialTileCount = 3; // S·ªë l∆∞·ª£ng √¥ ƒë·∫∑c bi·ªát
  const specialTiles = [];

  while (specialTiles.length < specialTileCount) {
    const randomIndex = Math.floor(Math.random() * validLandmarkTiles.length);
    const randomTile = validLandmarkTiles[randomIndex];
    if (!specialTiles.includes(randomTile)) {
      specialTiles.push(randomTile);
    }
  }

  // L∆∞u danh s√°ch √¥ ƒë·∫∑c bi·ªát v√†o tr·∫°ng th√°i ng∆∞·ªùi ch∆°i
  const state = JSON.parse(localStorage.getItem("playerState")) || {};
  state.specialTiles = specialTiles;
  localStorage.setItem("playerState", JSON.stringify(state));

  console.log("√î ƒë·∫∑c bi·ªát ƒë∆∞·ª£c ch·ªçn:", specialTiles);
};

function handleSpecialTile(tileIndex) {
  const state = JSON.parse(localStorage.getItem("playerState"));
  const playerRegion = localStorage.getItem("playerHometown"); // V√πng mi·ªÅn c·ªßa ng∆∞·ªùi ch∆°i
  const specialTiles = state.specialTiles || [];

  if (specialTiles.includes(tileIndex)) {
    const tileRegion = getRegionForTile(tileIndex); // H√†m tr·∫£ v·ªÅ v√πng mi·ªÅn c·ªßa √¥
    let taxAmount = 100000; // S·ªë ti·ªÅn b·ªã tr·ª´ m·∫∑c ƒë·ªãnh

    // N·∫øu ng∆∞·ªùi ch∆°i ƒë·∫øn t·ª´ v√πng mi·ªÅn c·ªßa √¥, gi·∫£m s·ªë ti·ªÅn b·ªã tr·ª´
    if (playerRegion === tileRegion) {
      taxAmount = 50000; // Ng∆∞·ªùi ch∆°i qu√™ ·ªü ƒë√≥ b·ªã tr·ª´ √≠t h∆°n
    }

    // Tr·ª´ ti·ªÅn ng∆∞·ªùi ch∆°i
    state.money = (state.money || 0) - taxAmount;
    localStorage.setItem("playerState", JSON.stringify(state));
    updateInfoPanel();

    alert(`B·∫°n ƒë√£ ƒë·∫øn √¥ tham quan ƒë·∫∑c bi·ªát! B·ªã tr·ª´ ${taxAmount.toLocaleString()} VND.`);
  }
};
function getRegionForTile(tileIndex) {
  const regionMapping = {
    1: "An Giang",
    3: "Kon Tum",
    4: "C·∫ßn Th∆°",
    5: "V≈©ng T√†u",
    6: "B·∫Øc Ninh",
    7: "H·∫£i Ph√≤ng",
    8: "Cao B·∫±ng",
    9: "H√† N·ªôi",
    11:"Qu·∫£ng Ninh",
    12:"ƒê·ªìng th√°p",
    13: "B·∫Øc K·∫°n",
    14: "L√†o Cai",
    15: "T√¢y Nguy√™n",
    16:"Ninh Thu·∫≠n",
    18: "T√¢y Ninh",
    19: "H√† Giang",
    21: "B·∫°c li√™u",
    22: "Ph√∫ Th·ªç",
    23: "Y√™n B√°i",
    24: "H√† Nam",
    25: "Thanh H√≥a",
    26: "Ki√™n Giang",
    27: "L√¢m ƒê·ªìng",
    29: "H∆∞ng Y√™n",
    31:"Ngh·ªá An",
    32: "H√≤a B√¨nh",
    33: "Hu·∫ø",
    34: "Qu·∫£ng Tr·ªã",
    35: "S√≥c TrƒÉng",
    37: "ƒê√† N·∫µng",
    38: "Qu·∫£ng nam",
    39: "Kh√°nh H√≤a"
    // Th√™m c√°c √¥ v√† v√πng mi·ªÅn t∆∞∆°ng ·ª©ng...
  };

  return regionMapping[tileIndex] || "Kh√¥ng x√°c ƒë·ªãnh";
};

function highlightSpecialTiles() {
  const state = JSON.parse(localStorage.getItem("playerState"));
  const specialTiles = state.specialTiles || [];

  specialTiles.forEach(tileIndex => {
    const tile = document.querySelector(`[data-index="${tileIndex}"]`);
    if (tile) {
      tile.classList.add("special-tile"); // Th√™m class CSS ƒë·ªÉ l√†m n·ªïi b·∫≠t √¥
    }
  });
};

};